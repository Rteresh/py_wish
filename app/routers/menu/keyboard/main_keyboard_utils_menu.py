from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.i18n import gettext as _

from app.dao.user.user_dao import UserDao
from app.dao.wish.active_wish_dao import ActiveDao

main_keyboard = Router()


def get_main_keyboard(active_wish=False):
    if active_wish:
        start_button = [KeyboardButton(text=_("üéØ –ê–∫—Ç–∏–≤–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ"))]
    else:
        start_button = [KeyboardButton(text="üé≤ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")]

    buttons = [
        start_button,
        [
            KeyboardButton(text="üå† –ñ–µ–ª–∞–Ω–∏—è"),
            KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è"),
            KeyboardButton(text="üíë –ü–∞—Ä–∞")
        ],
        [KeyboardButton(text="üîû –†–µ–∂–∏–º 18+")],
        [
            KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"),
            KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        ],
    ]

    keyboard = ReplyKeyboardMarkup(
        keyboard=buttons,
        one_time_keyboard=False,  # –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        resize_keyboard=True,
        input_field_placeholder=_("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é")
    )
    return keyboard


@main_keyboard.message(F.text.contains("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
async def step_back_utils(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(await _flag(message)))


@main_keyboard.message(Command("menu"))
async def main_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard(await _flag(message)))


@main_keyboard.callback_query(F.data.startswith("menu_back"))
async def inline_menu_back(callback: types.CallbackQuery):
    await callback.message.edit_text(text=_('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'), reply_markup=None)


async def update_main_keyboard(message: types.Message):
    await message.answer(_('–£–¥–∞—á–∏ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏'), reply_markup=get_main_keyboard(await _flag(message)))


async def _flag(message: types.Message) -> bool:
    user = await UserDao.find_by_id(message.from_user.id)
    return await ActiveDao.check_active_wish(user)


@main_keyboard.message(F.text.contains('–†–µ–∂–∏–º 18+'))
async def premium_main(message: types.Message):
    await message.answer("–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ/—Å–∫–æ—Ä–æ...", reply_markup=get_main_keyboard(await _flag(message)))

# inline menu back

# def _get_inline_main_keyboard():
#     buttons = [
#         [InlineKeyboardButton(text=_("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"), callback_data="menu_back")],
#     ]
#     keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
#
#     return keyboard


# async def inline_main_menu(message: types.Message):
#     await message.answer(text=_('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'), reply_markup=_get_inline_main_keyboard())
