import os
from contextlib import suppress
from random import randint
from typing import Optional

from aiogram import types, Router, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters.callback_data import CallbackData
from aiogram.filters.command import Command
from aiogram.types import InputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import FSInputFile

from app.config import MEDIA_DIR
from app.text.menu.rules import get_rules

all_media_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'all_media')

menu_router = Router()

user_data = {}


@menu_router.message(Command("special_buttons"))
async def cmd_special_buttons(message: types.Message):
    builder = ReplyKeyboardBuilder()
    # –º–µ—Ç–æ–¥ row –ø–æ–∑–≤–æ–ª—è–µ—Ç —è–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä—è–¥
    # –∏–∑ –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–π —Ä—è–¥
    # –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫...
    builder.row(
        types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True),
        types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    )
    # ... –≤—Ç–æ—Ä–æ–π –∏–∑ –æ–¥–Ω–æ–π ...
    builder.row(types.KeyboardButton(
        text="–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É",
        request_poll=types.KeyboardButtonPollType(type="quiz"))
    )
    # ... –∞ —Ç—Ä–µ—Ç–∏–π —Å–Ω–æ–≤–∞ –∏–∑ –¥–≤—É—Ö
    builder.row(
        types.KeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            request_user=types.KeyboardButtonRequestUser(
                request_id=1,
                user_is_premium=True
            )
        ),
        types.KeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ä—É–º–∞–º–∏",
            request_chat=types.KeyboardButtonRequestChat(
                request_id=2,
                chat_is_channel=False,
                chat_is_forum=True
            )
        )
    )
    # WebApp-–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, —Å–æ—Ä—Ä–∏ :(

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )


@menu_router.message(F.user_shared)
async def on_user_shared(message: types.Message):
    print(
        f"Request {message.user_shared.request_id}. "
        f"User ID: {message.user_shared.user_id}"
    )


@menu_router.message(F.chat_shared)
async def on_user_shared(message: types.Message):
    print(
        f"Request {message.chat_shared.request_id}. "
        f"User ID: {message.chat_shared.chat_id}"
    )


file = r'/app/all_media/image1.jpg'


@menu_router.message(Command("stt"))
async def cmd_random(message: types.Message):
    builder = InlineKeyboardBuilder()
    photo_path = MEDIA_DIR / 'image1.jpg'  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏

    builder.row(types.InlineKeyboardButton(
        text="–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üìñ",
        callback_data="rules")
    )
    builder.row(types.InlineKeyboardButton(
        text="FAQ \ud83e\udde0",
        callback_data="FAQ")
    )
    builder.row(types.InlineKeyboardButton(
        text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ \u2699",
        callback_data="settings")
    )
    await message.answer_photo(
        photo=FSInputFile(photo_path),
        caption="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10",
        reply_markup=builder.as_markup()
    )


@menu_router.callback_query(F.data == "rules")
async def send_rules(callback: types.CallbackQuery):
    await callback.answer(
        text=await get_rules(),
        show_alert=True
    )


@menu_router.callback_query(F.data == "FAQ")
async def send_FAQ(callback: types.CallbackQuery):
    await callback.answer(
        text="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º!",
        show_alert=True
    )


@menu_router.callback_query(F.data == "settings")
async def menu_settings(callback: types.CallbackQuery):
    await callback.message.edit_text(
        text="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º!",
    )
    await callback.answer()
    # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ await call.answer()


# ----------
# –≠—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç –ë–ï–ó —Ñ–∞–±—Ä–∏–∫–∏.

def get_keyboard():
    buttons = [
        [
            types.InlineKeyboardButton(text="-1", callback_data="num_decr"),
            types.InlineKeyboardButton(text="+1", callback_data="num_incr")
        ],
        [types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="num_finish")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


async def update_num_text(message: types.Message, new_value: int):
    with suppress(TelegramBadRequest):
        await message.edit_text(
            f"–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: {new_value}",
            reply_markup=get_keyboard()
        )


@menu_router.message(Command("numbers"))
async def cmd_numbers(message: types.Message):
    user_data[message.from_user.id] = 0
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ:", reply_markup=get_keyboard())


@menu_router.callback_query(F.data.startswith("num_"))
async def callbacks_num(callback: types.CallbackQuery):
    user_value = user_data.get(callback.from_user.id, 0)
    action = callback.data.split("_")[1]

    if action == "incr":
        user_data[callback.from_user.id] = user_value + 1
        await update_num_text(callback.message, user_value + 1)
    elif action == "decr":
        user_data[callback.from_user.id] = user_value - 1
        await update_num_text(callback.message, user_value - 1)
    elif action == "finish":
        await callback.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_value}")

    await callback.answer()


# ----------
# –≠—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç —Å —Ñ–∞–±—Ä–∏–∫–æ–π –∫–æ–ª–±—ç–∫–æ–≤

class NumbersCallbackFactory(CallbackData, prefix="fabnum"):
    action: str
    value: Optional[int] = None


def get_keyboard_fab():
    builder = InlineKeyboardBuilder()
    builder.button(text="-2", callback_data=NumbersCallbackFactory(action="change", value=-2))
    builder.button(text="-1", callback_data=NumbersCallbackFactory(action="change", value=-1))
    builder.button(text="+1", callback_data=NumbersCallbackFactory(action="change", value=1))
    builder.button(text="+2", callback_data=NumbersCallbackFactory(action="change", value=2))
    builder.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=NumbersCallbackFactory(action="finish"))
    builder.adjust(4)
    return builder.as_markup()


async def update_num_text_fab(message: types.Message, new_value: int):
    with suppress(TelegramBadRequest):
        await message.edit_text(
            f"–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: {new_value}",
            reply_markup=get_keyboard_fab()
        )


@menu_router.message(Command("numbers_fab"))
async def cmd_numbers_fab(message: types.Message):
    user_data[message.from_user.id] = 0
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: 0", reply_markup=get_keyboard_fab())


# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫: -2, -1, +1, +2
@menu_router.callback_query(NumbersCallbackFactory.filter(F.action == "change"))
async def callbacks_num_change_fab(callback: types.CallbackQuery, callback_data: NumbersCallbackFactory):
    # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    user_value = user_data.get(callback.from_user.id, 0)

    user_data[callback.from_user.id] = user_value + callback_data.value
    await update_num_text_fab(callback.message, user_value + callback_data.value)
    await callback.answer()


# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
@menu_router.callback_query(NumbersCallbackFactory.filter(F.action == "finish"))
async def callbacks_num_finish_fab(callback: types.CallbackQuery):
    # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    user_value = user_data.get(callback.from_user.id, 0)

    await callback.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_value}")
    await callback.answer()
